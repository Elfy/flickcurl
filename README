Flickcurl - a C API to the Flickr API web services

API calls supported

auth.getFullToken - turn a frob into an auth_token
char* flickcurl_auth_getFullToken(flickcurl* fc, const char* frob);

flickr.photos.getInfo - get information about a photo
flickcurl_photo* flickcurl_photos_getInfo(flickcurl *fc, const char* photo_id);

flickr.test.echo - echo what is sent
int flickcurl_test_echo(flickcurl* fc, const char* key, const char* value);


USAGE:

  flickcurl *fc;

  fc=flickcurl_new();

  flickcurl_set_api_key(fc, "...");
  flickcurl_set_shared_secret(fc, "...");
  flickcurl_set_auth_token(fc, "...");

  /* or more likely, read some of the above from a config file */

  photo=flickcurl_photos_getInfo(fc, "photo-id");

  flickcurl_photo_field field;
  for(field=0; field <= PHOTO_FIELD_LAST; field++) {
    flickcurl_field_value_type datatype=photo->fields[field].type;
    
    if(datatype == VALUE_TYPE_NONE)
      continue;
    
    fprintf(stderr, "field %s (%d) with %s value: '%s' / %d\n", 
            flickcurl_get_photo_field_label(field), field,
            flickcurl_get_field_value_type_label(datatype),
            photo->fields[field].string, photo->fields[field].integer);
  }

  int i;
  for(i=0; i < photo->tags_count; i++) {
    flickcurl_tag* tag=photo->tags[i];
    fprintf(stderr, "%d) %s tag: id %s author %s raw '%s' cooked '%s'\n",
            i, (tag->machine_tag ? "machine" : "regular"),
            tag->id, tag->author, tag->raw, tag->cooked);
  }

  free_flickcurl_photo(photo);

  flickcurl_free(fc);
